{"version":3,"sources":["component/Member.js","socket/socketManager.js","rtc/rtc.js","utils/utils.js","component/ChatInput.js","component/Chat.js","component/MyVideo.js","route/Main.js","route/Home.js","App.js","serviceWorker.js","index.js"],"names":["Member","memberList","offerToMember","videoRef","useRef","map","member","key","onDoubleClick","id","name","ref","onClick","stream","current","srcObject","autoplay","state","team","this","socket","io","userInfo","emit","addMember","removeMember","on","userList","forEach","console","log","off","user","message","onChatMessage","error","receiveDataMessage","type","targetkey","messageObject","pcList","pcInfo","url","credential","username","getUserMedia","a","navigator","mediaDevices","video","audio","peerConnection","Promise","res","rej","then","window","myStream","pc","RTCPeerConnection","addStream","oniceconnectionstatechange","event","connectionState","handleOnIceConnectionStateChange","e","handleError","createOffer","sessionDescription","setLocalDescription","catch","createAnswer","receiveOffer","offer","setRemoteDescription","RTCSessionDescription","receiveAnswer","answer","addIceCandidate","candidate","getNewId","Math","round","random","ChatInput","sendMessage","useState","setMessage","Fragment","TextField","value","onChange","target","onKeyPress","Button","Chat","chatList","chat","MyVideo","useEffect","Main","useParams","teamId","userName","utils","myInfo","setChatList","setMemberList","setMyStream","filter","receiveChatMessage","data","rtc","onicecandidate","handleIceCandidate","onaddstream","handleRemoteStreamAdded","onremovestream","handleRemoteStreamRemoved","socketManager","sendMessageToUser","remoteStream","find","newMember","index","findIndex","newMemberList","updateMember","getMyStream","join","onJoin","offJoin","onMessageReceived","offMessageReceived","to","getMyInfo","sendChatMessageToAll","sendChatMessage","useStyles","makeStyles","home","position","display","width","height","justifyContent","alignItems","flexDirection","color","background","title","fontSize","startButton","borderRadius","joinButton","Home","styles","history","useHistory","started","setStarted","setTeamId","setUserName","handleEnterKey","joinTheTeam","push","Box","className","label","joinTextField","required","App","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.54bc8fcf.chunk.js","sourcesContent":["import React, { useRef } from 'react';\r\n\r\nexport default function Member({ memberList, offerToMember }) {\r\n    \r\n    const videoRef = useRef();\r\n\r\n    function addStream(stream) {\r\n        if (stream) {\r\n            videoRef.current.srcObject = stream;\r\n            videoRef.current.autoplay = 'autoplay';\r\n        }\r\n    }\r\n\r\n    return <ul>\r\n        {memberList.map(member =>\r\n            (<li key={member.key} onDoubleClick={() => { offerToMember(member) } }>\r\n                <p>{member.id}</p>\r\n                <p>{member.name}</p>\r\n                <video ref={videoRef} onClick={addStream(member.stream)}></video>\r\n            </li>))}\r\n    </ul>\r\n}","import { io } from 'socket.io-client';\r\n\r\nconst state = {\r\n    key: '',\r\n    id: '',\r\n    team: '',\r\n    name: ''\r\n}\r\n\r\nclass SocketManager {\r\n    constructor() {\r\n        this.socket = io(\"https://flawless-psyche-307902.du.r.appspot.com\");\r\n    }\r\n\r\n    join(userInfo) {\r\n        state.id = userInfo.id;\r\n        state.team = userInfo.team;\r\n        state.name = userInfo.name;\r\n        this.socket.emit(\"join\", userInfo);\r\n    }\r\n\r\n    onJoin(addMember, removeMember) {\r\n        this.socket.on('myInfo', userInfo => {\r\n            state.key = userInfo.key;\r\n        })\r\n\r\n        this.socket.on('userList', userList => {\r\n            userList.forEach(userInfo => {\r\n                console.log(userInfo);\r\n                addMember(userInfo);\r\n            })\r\n        })\r\n\r\n        this.socket.on(\"joinedUser\", member => {\r\n            console.log(member);\r\n            addMember(member);\r\n        });\r\n\r\n        this.socket.on(\"leavedUser\", key => {\r\n            removeMember(key);\r\n        });\r\n    }\r\n\r\n    offJoin() {\r\n        this.socket.off('myInfo');\r\n        this.socket.off('userList');\r\n        this.socket.off('joinedUser');\r\n        this.socket.off('leavedUser');\r\n    }\r\n\r\n    getMyInfo() {\r\n        return state;\r\n    }\r\n\r\n    sendChatMessageToAll(user, message) {\r\n        this.socket.emit(\"chatMessageToAll\", user, message);\r\n    }\r\n\r\n    onChatMessage(onChatMessage) {\r\n        this.socket.on('receiveChatMessage', onChatMessage);\r\n    }\r\n\r\n    onError(error) {\r\n        console.error(error);\r\n    }\r\n\r\n    onMessageReceived(receiveDataMessage) {\r\n        this.socket.on('receivePrivateMessage', receiveDataMessage);\r\n    }\r\n\r\n    offMessageReceived() {\r\n        this.socket.off('receivePrivateMessage')\r\n    }\r\n\r\n    sendMessageToUser(type, targetkey, message) {\r\n        const messageObject = {\r\n            id: state.id, // sender id\r\n            key: state.key, // sender key\r\n            type: type,\r\n            message: message\r\n        };\r\n        this.socket.emit('privateMessage', targetkey, messageObject);\r\n    }\r\n}\r\n\r\nexport default new SocketManager();","const state = {\r\n    pcList: {},\r\n    stream: null\r\n}\r\n\r\nconst pcInfo = {\r\n    'iceServers': [\r\n        { url: 'stun:34.64.112.126:3478' },\r\n        {\r\n            url: 'turn:34.64.112.126:3478?transport=udp',\r\n            credential: 'dmdcjfdl',\r\n            username: 'ekim'\r\n        }],\r\n    'DtlsSrtpKeyAgreement': true\r\n\r\n};\r\n\r\nasync function getUserMedia() {\r\n    if (state.stream) {\r\n        return state.stream;\r\n    }\r\n    state.stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n    return state.stream;\r\n}\r\n\r\nfunction peerConnection(id) {\r\n    return new Promise((res, rej) => {\r\n        getUserMedia().then(stream => {\r\n            window.myStream = stream;\r\n            try {\r\n                const pc = new RTCPeerConnection(pcInfo);\r\n                pc.addStream(stream);\r\n                pc.oniceconnectionstatechange = (event) => { handleOnIceConnectionStateChange(id, event); };\r\n                state.pcList[id] = pc;\r\n                res(pc);\r\n            } catch (e) {\r\n                console.error(e);\r\n                rej(e)\r\n            }\r\n        })\r\n    });\r\n}\r\n\r\nfunction createOffer(id) {\r\n    console.log('createOffer: ' + id);\r\n    return new Promise((res, rej) => {\r\n        peerConnection(id)\r\n            .then(pc => {\r\n                state.pcList[id].createOffer(sessionDescription => {\r\n                    state.pcList[id].setLocalDescription(sessionDescription);\r\n                    res({ pc, sessionDescription });\r\n                }, handleError)\r\n            })\r\n            .catch(e => {\r\n                rej(e);\r\n            })\r\n    })\r\n}\r\n\r\nfunction receiveOffer(id, offer) {\r\n    console.log('receiveOffer: ' + id);\r\n    if (!state.pcList[id]) {\r\n        return new Promise(res => {\r\n            peerConnection(id)\r\n                .then(pc => {\r\n                    pc.setRemoteDescription(new RTCSessionDescription(offer));\r\n                    res(pc);\r\n                });\r\n        })\r\n    }\r\n}\r\n\r\nfunction createAnswer(id) {\r\n    return new Promise(res => {\r\n        if (state.pcList[id].connectionState !== \"connected\") {\r\n            state.pcList[id].createAnswer(sessionDescription => {\r\n                state.pcList[id].setLocalDescription(sessionDescription);\r\n                res(sessionDescription);\r\n            }, handleError);\r\n        }\r\n    })\r\n}\r\n\r\nfunction receiveAnswer(id, answer) {\r\n    state.pcList[id].setRemoteDescription(new RTCSessionDescription(answer));\r\n}\r\n\r\nfunction addIceCandidate(id, candidate) {\r\n    if (state.pcList[id])\r\n        state.pcList[id].addIceCandidate(candidate);\r\n}\r\n\r\nfunction handleOnIceConnectionStateChange(id, event) {\r\n    console.log(id, event);\r\n    console.log(state.pcList[id].connectionState)\r\n    if (state.pcList[id].connectionState === \"connected\") {\r\n        console.log('connected');\r\n    }\r\n    // if (peerConnection.connectionState === 'connected') {\r\n    //     // Peers connected!\r\n    // }\r\n}\r\n\r\nfunction handleError(error) {\r\n    console.error(error);\r\n}\r\n\r\n\r\nexport default {\r\n    getUserMedia,\r\n    createOffer,\r\n    createAnswer,\r\n    receiveOffer,\r\n    receiveAnswer,\r\n    addIceCandidate,\r\n}","function getNewId() {\r\n    return Math.round(Math.random() * 99999999);\r\n}\r\n\r\nexport default {\r\n    getNewId\r\n}","import React, { useState } from 'react';\r\nimport { Button, TextField } from '@material-ui/core'\r\n\r\nexport default function ChatInput({ sendMessage }) {\r\n    \r\n    const [message, setMessage] = useState(\"\");\r\n\r\n\r\n    function handleTextChange(e) {\r\n        setMessage(e.target.value);\r\n    } \r\n\r\n    function handleEnterKey(e) {\r\n        if (e.key === 'Enter') {\r\n            sendMessage(message);\r\n            setMessage(() => \"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TextField\r\n                value={message}\r\n                onChange={handleTextChange}\r\n                onKeyPress={handleEnterKey}\r\n            ></TextField>\r\n            <Button\r\n                onClick={() => { sendMessage(message); setMessage(() => \"\"); }}>Send</Button>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default function Chat({ chatList }) {\r\n    \r\n    return <ul>\r\n        {chatList.map(chat =>\r\n            (<li key={chat.key}>\r\n                <p>{chat.name}</p>\r\n                <p>{chat.message}</p>\r\n            </li>))}\r\n    </ul>\r\n}","import React, { useEffect, useRef } from 'react';\r\n\r\nexport default function MyVideo({ stream }) {\r\n    \r\n    const videoRef = useRef();\r\n    useEffect(() => {\r\n        videoRef.current.srcObject = stream;\r\n        videoRef.current.autoplay = 'autoplay';\r\n    }, [stream]);\r\n\r\n    return <video ref={videoRef}></video>\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport Member from '../component/Member';\r\nimport socketManager from '../socket/socketManager';\r\nimport rtc from '../rtc/rtc';\r\nimport utils from '../utils/utils';\r\nimport ChatInput from '../component/ChatInput';\r\nimport Chat from '../component/Chat';\r\nimport MyVideo from '../component/MyVideo'\r\nimport { Button } from '@material-ui/core';\r\n\r\nwindow.remoteStream = {};\r\n\r\nexport default function Main() {\r\n    const { teamId, userName } = useParams();\r\n    const [myInfo, setMyInfo] = useState({\r\n        key: '',\r\n        id: utils.getNewId(),\r\n        name: userName,\r\n        team: teamId\r\n    });\r\n    const [chatList, setChatList] = useState([]);\r\n    const [memberList, setMemberList] = useState([]);\r\n    const [myStream, setMyStream] = useState(null);\r\n\r\n    \r\n    useEffect(() => {\r\n        async function getMyStream() {\r\n            const stream = await rtc.getUserMedia();\r\n            console.log(stream);\r\n            setMyStream(stream);\r\n        }\r\n        getMyStream();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        socketManager.join(myInfo);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        socketManager.onJoin(addMember, removeMember);\r\n\r\n        return () => {\r\n            socketManager.offJoin();\r\n        }\r\n    });\r\n\r\n    // useEffect(() => {\r\n    //     socketManager.onJoin(addMember, removeMember);\r\n    // }, []);\r\n\r\n    useEffect(() => {\r\n        socketManager.onChatMessage(receiveChatMessage);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        socketManager.onMessageReceived(receiveDataMessage);\r\n\r\n        return () => {\r\n            socketManager.offMessageReceived();\r\n        }\r\n    });\r\n\r\n    function addMember(member) {\r\n        setMemberList(memberList => [...memberList, member]);\r\n    }\r\n\r\n    function updateMember(newMember) {\r\n        const index = [...memberList].findIndex(member => {\r\n            return member.key === newMember.key\r\n        });\r\n        let newMemberList = [...memberList];\r\n        newMemberList[index] = newMember;\r\n        setMemberList(() => newMemberList);\r\n    }\r\n\r\n    function removeMember(key) {\r\n        setMemberList(memberList => memberList.filter(member => {\r\n            return member.key !== key;\r\n        }));\r\n    }\r\n\r\n    function sendChatMessage(message) {\r\n        const user = socketManager.getMyInfo();\r\n        socketManager.sendChatMessageToAll(user, message);\r\n    }\r\n\r\n    function receiveChatMessage(chat) {\r\n        setChatList(chatList => [...chatList, chat]);\r\n    }\r\n\r\n    function offerToMember(user) {\r\n        rtc.createOffer(user.id, user.key)\r\n            .then(({ pc, sessionDescription }) => {\r\n                pc.onicecandidate = (event) => { handleIceCandidate(user.key, event) };\r\n                pc.onaddstream = (event) => { handleRemoteStreamAdded(user.key, event); };\r\n                pc.onremovestream = handleRemoteStreamRemoved;\r\n                socketManager.sendMessageToUser('offer', user.key, sessionDescription);\r\n            });\r\n    }\r\n\r\n\r\n    function receiveDataMessage(data) {\r\n        switch (data.type) {\r\n            case 'offer':\r\n                rtc.receiveOffer(data.id, data.message)\r\n                    .then(pc => {\r\n                        pc.onicecandidate = (event) => { handleIceCandidate(data.key, event) };\r\n                        pc.onaddstream = (event) => { handleRemoteStreamAdded(data.key, event); };\r\n                        pc.onremovestream = handleRemoteStreamRemoved;\r\n                        rtc.createAnswer(data.id).then(sessionDescription => {\r\n                            socketManager.sendMessageToUser('answer', data.key, sessionDescription);\r\n                        })\r\n                    })\r\n                break;\r\n            case 'answer':\r\n                rtc.receiveAnswer(data.id, data.message);\r\n                break;\r\n            case 'candidate':\r\n                console.log('candidate');\r\n                console.log(data);\r\n                rtc.addIceCandidate(data.id, data.message);\r\n                break;\r\n            default:\r\n                console.log(data);\r\n                break;\r\n        }\r\n    }\r\n\r\n    function handleIceCandidate(key, event) {\r\n        if (event.candidate) {\r\n            socketManager.sendMessageToUser('candidate', key, event.candidate);\r\n        }\r\n    }\r\n\r\n    function handleRemoteStreamAdded(key, event) {\r\n        console.log('handleRemoteStreamAdded');\r\n        console.log(event.stream);\r\n        window.remoteStream[key] = event.stream;\r\n        const member = [...memberList].find(member => member.key === key);\r\n        if (member) {\r\n            member.stream = event.stream;\r\n            updateMember(member);\r\n        }\r\n        // const video = document.createElement('video');\r\n        // video.id = userId;\r\n        // video.srcObject = event.stream;\r\n        // video.autoplay = 'autoplay';\r\n        // document.body.append(video);\r\n        // remote.push({\r\n        //     video: video,\r\n        //     stream: event.stream\r\n        // });\r\n    }\r\n\r\n    function handleRemoteStreamRemoved(event) {\r\n        console.log(event);\r\n    }\r\n\r\n    function checkMemberList() {\r\n        console.log(memberList);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p>{teamId}팀과 함께하는 중</p>\r\n            <Link to=\"/\">첫 페이지로 가기</Link>\r\n            <Button\r\n                onClick={() => { checkMemberList() }}>MemberListCheck</Button>\r\n            <MyVideo\r\n                stream={myStream}\r\n            ></MyVideo>\r\n            <Member\r\n                memberList={memberList}\r\n                offerToMember={offerToMember}\r\n            ></Member>\r\n            <ChatInput\r\n                sendMessage={(user, message) => { sendChatMessage(user, message) }}\r\n            ></ChatInput>\r\n            <Chat\r\n                chatList={chatList}\r\n            ></Chat>\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { Button, Box, makeStyles, TextField } from '@material-ui/core'\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles({\r\n    home: {\r\n        position: 'absolute',\r\n        display: 'flex',\r\n        width: '100%',\r\n        height: '100%',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        flexDirection: 'column',\r\n        color: '#fff',\r\n        background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)'\r\n    },\r\n    title: {\r\n        height: '3rem',\r\n        fontSize: '2rem'\r\n    },\r\n    startButton: {\r\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n        color: '#fff',\r\n        width: '200px',\r\n        height: '50px',\r\n        borderRadius: '30px',\r\n        fontSize: '1.2rem'\r\n    },\r\n    joinButton: {\r\n        fontSize: '1.2rem',\r\n        color: '#fff'\r\n    }\r\n})\r\n\r\nexport default function Home() {\r\n    const styles = useStyles();\r\n    const history = useHistory();\r\n    const [started, setStarted] = useState(false);\r\n    const [teamId, setTeamId] = useState('');\r\n    const [userName, setUserName] = useState('');\r\n\r\n    function handleClick() {\r\n        setStarted(true);\r\n    }\r\n    function handleChange(e) {\r\n        setTeamId(e.target.value);\r\n    }\r\n    function handleChangeMyName(e) {\r\n        setUserName(e.target.value);\r\n    }\r\n    function handleEnterKey(e) {\r\n        if (e.key === 'Enter') {\r\n            started ? joinTheTeam() : setStarted(true);\r\n        }\r\n    }\r\n    function joinTheTeam() {\r\n        history.push(`/team/${teamId}/${userName}`);\r\n    }\r\n\r\n    return (\r\n        <Box className={styles.home}>\r\n            <h2 className={styles.title}>T E L E P A T H Y</h2>\r\n            <h3>\r\n                {!started && \r\n                <>\r\n                    <TextField\r\n                        label=\"MY NAME\"\r\n                        className={styles.joinTextField}\r\n                        onChange={handleChangeMyName}\r\n                        onKeyPress={handleEnterKey}\r\n                        required\r\n                    />\r\n                    <br/><br/>\r\n                    <Button\r\n                        className={styles.startButton}\r\n                        onClick={handleClick}>START\r\n                    </Button>\r\n                </>}\r\n                {started && <div>\r\n                    <Button\r\n                        className={styles.joinButton}\r\n                        onClick={joinTheTeam}>JOIN THE\r\n                    </Button>\r\n                    <TextField\r\n                        label=\"TEAM\"\r\n                        className={styles.joinTextField}\r\n                        onChange={handleChange}\r\n                        onKeyPress={handleEnterKey}\r\n                    />\r\n                </div>}\r\n            </h3>\r\n        </Box >\r\n    )\r\n}","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport Main from './route/Main';\nimport Home from './route/Home';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/team/:teamId/:userName\">\n          <Main />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}