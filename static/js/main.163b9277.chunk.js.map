{"version":3,"sources":["component/Member.js","rtc/rtc.js","socket/socketManager.js","utils/utils.js","component/ChatInput.js","component/Chat.js","route/Main.js","route/Home.js","App.js","serviceWorker.js","index.js"],"names":["Member","memberList","offerToMember","videoRef","useRef","map","member","key","onDoubleClick","id","name","ref","onClick","stream","current","srcObject","autoplay","state","pcList","pcInfo","url","credential","username","a","navigator","mediaDevices","getUserMedia","video","audio","peerConnection","Promise","res","rej","then","window","myStream","pc","RTCPeerConnection","addStream","oniceconnectionstatechange","event","console","log","connectionState","handleOnIceConnectionStateChange","e","error","handleError","createOffer","sessionDescription","setLocalDescription","catch","createAnswer","receiveOffer","offer","setRemoteDescription","RTCSessionDescription","receiveAnswer","answer","addIceCandidate","candidate","team","this","socket","io","userInfo","emit","addMember","removeMember","on","userList","forEach","off","user","message","onChatMessage","receiveDataMessage","type","targetkey","messageObject","getNewId","Math","round","random","ChatInput","sendMessage","useState","setMessage","Fragment","TextField","value","onChange","target","onKeyPress","Button","Chat","chatList","chat","Main","useParams","teamId","userName","utils","myInfo","setChatList","setMemberList","filter","receiveChatMessage","data","rtc","onicecandidate","handleIceCandidate","onaddstream","handleRemoteStreamAdded","onremovestream","handleRemoteStreamRemoved","socketManager","sendMessageToUser","remoteStream","find","newMember","index","findIndex","newMemberList","updateMember","useEffect","join","onJoin","offJoin","onMessageReceived","offMessageReceived","to","getMyInfo","sendChatMessageToAll","sendChatMessage","useStyles","makeStyles","home","position","display","width","height","justifyContent","alignItems","flexDirection","color","background","title","fontSize","startButton","borderRadius","joinButton","Home","styles","history","useHistory","started","setStarted","setTeamId","setUserName","handleEnterKey","joinTheTeam","push","Box","className","label","joinTextField","required","App","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.163b9277.chunk.js","sourcesContent":["import React, { useRef } from 'react';\r\n\r\nexport default function Member({ memberList, offerToMember }) {\r\n    \r\n    const videoRef = useRef();\r\n\r\n    function addStream(stream) {\r\n        if (stream) {\r\n            videoRef.current.srcObject = stream;\r\n            videoRef.current.autoplay = 'autoplay';\r\n        }\r\n    }\r\n\r\n    return <ul>\r\n        {memberList.map(member =>\r\n            (<li key={member.key} onDoubleClick={() => { offerToMember(member) } }>\r\n                <p>{member.id}</p>\r\n                <p>{member.name}</p>\r\n                <video ref={videoRef} onClick={addStream(member.stream)}></video>\r\n            </li>))}\r\n    </ul>\r\n}","import socketManager from \"../socket/socketManager\";\r\n\r\nconst state = {\r\n    pcList: {},\r\n    stream: null\r\n}\r\n\r\nconst remote = []\r\n\r\nconst pcInfo = {\r\n    'iceServers': [\r\n        { url: 'stun:34.64.112.126:3478' },\r\n        {\r\n            url: 'turn:34.64.112.126:3478?transport=udp',\r\n            credential: 'dmdcjfdl',\r\n            username: 'ekim'\r\n        }],\r\n    'DtlsSrtpKeyAgreement': true\r\n\r\n};\r\n\r\nfunction init() {\r\n\r\n}\r\n\r\nasync function getUserMedia() {\r\n    if (state.stream) {\r\n        return state.stream;\r\n    }\r\n    state.stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n    return state.stream;\r\n}\r\n\r\nfunction peerConnection(id) {\r\n    return new Promise((res, rej) => {\r\n        getUserMedia().then(stream => {\r\n            window.myStream = stream;\r\n            try {\r\n                const pc = new RTCPeerConnection(pcInfo);\r\n                pc.addStream(stream);\r\n                pc.oniceconnectionstatechange = (event) => { handleOnIceConnectionStateChange(id, event); };\r\n                state.pcList[id] = pc;\r\n                res(pc);\r\n            } catch (e) {\r\n                console.error(e);\r\n                rej(e)\r\n            }\r\n        })\r\n    });\r\n}\r\n\r\nfunction createOffer(id) {\r\n    console.log('createOffer: ' + id);\r\n    return new Promise((res, rej) => {\r\n        peerConnection(id)\r\n            .then(pc => {\r\n                state.pcList[id].createOffer(sessionDescription => {\r\n                    state.pcList[id].setLocalDescription(sessionDescription);\r\n                    res({ pc, sessionDescription });\r\n                }, handleError)\r\n            })\r\n            .catch(e => {\r\n                rej(e);\r\n            })\r\n    })\r\n}\r\n\r\nfunction receiveOffer(id, offer) {\r\n    console.log('receiveOffer: ' + id);\r\n    if (!state.pcList[id]) {\r\n        return new Promise(res => {\r\n            peerConnection(id)\r\n                .then(pc => {\r\n                    pc.setRemoteDescription(new RTCSessionDescription(offer));\r\n                    res(pc);\r\n                });\r\n        })\r\n    }\r\n}\r\n\r\nfunction createAnswer(id) {\r\n    return new Promise(res => {\r\n        if (state.pcList[id].connectionState != \"connected\") {\r\n            state.pcList[id].createAnswer(sessionDescription => {\r\n                state.pcList[id].setLocalDescription(sessionDescription);\r\n                res(sessionDescription);\r\n            }, handleError);\r\n        }\r\n    })\r\n}\r\n\r\nfunction receiveAnswer(id, answer) {\r\n    state.pcList[id].setRemoteDescription(new RTCSessionDescription(answer));\r\n}\r\n\r\nfunction addIceCandidate(id, candidate) {\r\n    if (state.pcList[id])\r\n        state.pcList[id].addIceCandidate(candidate);\r\n}\r\n\r\nfunction handleOnIceConnectionStateChange(id, event) {\r\n    console.log(id, event);\r\n    console.log(state.pcList[id].connectionState)\r\n    if (state.pcList[id].connectionState === \"connected\") {\r\n        console.log('connected');\r\n    }\r\n    // if (peerConnection.connectionState === 'connected') {\r\n    //     // Peers connected!\r\n    // }\r\n}\r\n\r\nfunction handleError(error) {\r\n    console.error(error);\r\n}\r\n\r\n\r\nexport default {\r\n    createOffer,\r\n    createAnswer,\r\n    receiveOffer,\r\n    receiveAnswer,\r\n    addIceCandidate,\r\n}","import { io } from 'socket.io-client';\r\nimport rtc from '../rtc/rtc';\r\n\r\nconst state = {\r\n    key: '',\r\n    id: '',\r\n    team: '',\r\n    name: ''\r\n}\r\n\r\nclass SocketManager {\r\n    constructor() {\r\n        this.socket = io(\"https://flawless-psyche-307902.du.r.appspot.com\");\r\n    }\r\n\r\n    join(userInfo) {\r\n        state.id = userInfo.id;\r\n        state.team = userInfo.team;\r\n        state.name = userInfo.name;\r\n        this.socket.emit(\"join\", userInfo);\r\n    }\r\n\r\n    onJoin(addMember, removeMember) {\r\n        this.socket.on('myInfo', userInfo => {\r\n            state.key = userInfo.key;\r\n        })\r\n\r\n        this.socket.on('userList', userList => {\r\n            userList.forEach(userInfo => {\r\n                console.log(userInfo);\r\n                addMember(userInfo);\r\n            })\r\n        })\r\n\r\n        this.socket.on(\"joinedUser\", member => {\r\n            console.log(member);\r\n            addMember(member);\r\n        });\r\n\r\n        this.socket.on(\"leavedUser\", key => {\r\n            removeMember(key);\r\n        });\r\n    }\r\n\r\n    offJoin() {\r\n        this.socket.off('myInfo');\r\n        this.socket.off('userList');\r\n        this.socket.off('joinedUser');\r\n        this.socket.off('leavedUser');\r\n    }\r\n\r\n    getMyInfo() {\r\n        return state;\r\n    }\r\n\r\n    sendChatMessageToAll(user, message) {\r\n        this.socket.emit(\"chatMessageToAll\", user, message);\r\n    }\r\n\r\n    onChatMessage(onChatMessage) {\r\n        this.socket.on('receiveChatMessage', onChatMessage);\r\n    }\r\n\r\n    onError(error) {\r\n        console.error(error);\r\n    }\r\n\r\n    onMessageReceived(receiveDataMessage) {\r\n        this.socket.on('receivePrivateMessage', receiveDataMessage);\r\n    }\r\n\r\n    offMessageReceived() {\r\n        this.socket.off('receivePrivateMessage')\r\n    }\r\n\r\n    sendMessageToUser(type, targetkey, message) {\r\n        const messageObject = {\r\n            id: state.id, // sender id\r\n            key: state.key, // sender key\r\n            type: type,\r\n            message: message\r\n        };\r\n        this.socket.emit('privateMessage', targetkey, messageObject);\r\n    }\r\n}\r\n\r\nexport default new SocketManager();","function getNewId() {\r\n    return Math.round(Math.random() * 99999999);\r\n}\r\n\r\nexport default {\r\n    getNewId\r\n}","import React, { useState } from 'react';\r\nimport { Button, TextField } from '@material-ui/core'\r\n\r\nexport default function ChatInput({ sendMessage }) {\r\n    \r\n    const [message, setMessage] = useState(\"\");\r\n\r\n\r\n    function handleTextChange(e) {\r\n        setMessage(e.target.value);\r\n    } \r\n\r\n    function handleEnterKey(e) {\r\n        if (e.key === 'Enter') {\r\n            sendMessage(message);\r\n            setMessage(() => \"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TextField\r\n                value={message}\r\n                onChange={handleTextChange}\r\n                onKeyPress={handleEnterKey}\r\n            ></TextField>\r\n            <Button\r\n                onClick={() => { sendMessage(message); setMessage(() => \"\"); }}>Send</Button>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default function Chat({ chatList }) {\r\n    \r\n    return <ul>\r\n        {chatList.map(chat =>\r\n            (<li key={chat.key}>\r\n                <p>{chat.name}</p>\r\n                <p>{chat.message}</p>\r\n            </li>))}\r\n    </ul>\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport Member from '../component/Member';\r\nimport socketManager from '../socket/socketManager';\r\nimport rtc from '../rtc/rtc';\r\nimport utils from '../utils/utils';\r\nimport ChatInput from '../component/ChatInput';\r\nimport Chat from '../component/Chat';\r\nimport { Button } from '@material-ui/core';\r\n\r\nwindow.remoteStream = {};\r\n\r\nexport default function Main() {\r\n    const { teamId, userName } = useParams();\r\n    const [myInfo, setMyInfo] = useState({\r\n        key: '',\r\n        id: utils.getNewId(),\r\n        name: userName,\r\n        team: teamId\r\n    });\r\n    const [chatList, setChatList] = useState([]);\r\n    const [memberList, setMemberList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        socketManager.join(myInfo);\r\n    }, []);\r\n    \r\n    useEffect(() => {\r\n        socketManager.onJoin(addMember, removeMember);\r\n\r\n        return () => {\r\n            socketManager.offJoin();\r\n        }\r\n    });\r\n\r\n    // useEffect(() => {\r\n    //     socketManager.onJoin(addMember, removeMember);\r\n    // }, []);\r\n    \r\n    useEffect(() => {\r\n        socketManager.onChatMessage(receiveChatMessage);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        socketManager.onMessageReceived(receiveDataMessage);\r\n\r\n        return () => {\r\n            socketManager.offMessageReceived();\r\n        }\r\n    });\r\n\r\n    function addMember(member) {\r\n        setMemberList(memberList => [...memberList, member]);\r\n    }\r\n\r\n    function updateMember(newMember) {\r\n        const index = [...memberList].findIndex(member => {\r\n            return member.key === newMember.key\r\n        });\r\n        let newMemberList = [...memberList];\r\n        newMemberList[index] = newMember;\r\n        setMemberList(() => newMemberList);\r\n    }\r\n\r\n    function removeMember(key) {\r\n        setMemberList(memberList => memberList.filter(member => {\r\n            return member.key !== key;\r\n        }));\r\n    }\r\n\r\n    function sendChatMessage(message) {\r\n        const user = socketManager.getMyInfo();\r\n        socketManager.sendChatMessageToAll(user, message);\r\n    }\r\n\r\n    function receiveChatMessage(chat) {\r\n        setChatList(chatList => [...chatList, chat]);\r\n    }\r\n\r\n    function offerToMember(user) {\r\n        rtc.createOffer(user.id, user.key)\r\n            .then(({ pc, sessionDescription }) => {\r\n                pc.onicecandidate = (event) => { handleIceCandidate(user.key, event) };\r\n                pc.onaddstream = (event) => { handleRemoteStreamAdded(user.key, event); };\r\n                pc.onremovestream = handleRemoteStreamRemoved;\r\n                socketManager.sendMessageToUser('offer', user.key, sessionDescription);\r\n            });\r\n    }\r\n\r\n\r\n    function receiveDataMessage(data) {\r\n        switch (data.type) {\r\n            case 'offer':\r\n                rtc.receiveOffer(data.id, data.message)\r\n                .then(pc => {\r\n                    pc.onicecandidate = (event) => { handleIceCandidate(data.key, event) };\r\n                    pc.onaddstream = (event) => { handleRemoteStreamAdded(data.key, event); };\r\n                    pc.onremovestream = handleRemoteStreamRemoved;\r\n                    rtc.createAnswer(data.id).then(sessionDescription => {\r\n                        socketManager.sendMessageToUser('answer', data.key, sessionDescription);\r\n                    })\r\n                })\r\n                break;\r\n            case 'answer':\r\n                rtc.receiveAnswer(data.id, data.message);\r\n                break;\r\n            case 'candidate':\r\n                console.log('candidate');\r\n                console.log(data);\r\n                rtc.addIceCandidate(data.id, data.message);\r\n                break;\r\n            default:\r\n                console.log(data);\r\n                break;\r\n        }\r\n    }\r\n\r\n    function handleIceCandidate(key, event) {\r\n        if (event.candidate) {\r\n            socketManager.sendMessageToUser('candidate', key, event.candidate);\r\n        }\r\n    }\r\n\r\n    function handleRemoteStreamAdded(key, event) {\r\n        console.log('handleRemoteStreamAdded');\r\n        console.log(event.stream);\r\n        window.remoteStream[key] = event.stream;\r\n        const member = [...memberList].find(member => member.key === key);\r\n        if (member) {\r\n            member.stream = event.stream;\r\n            updateMember(member);\r\n        }\r\n        // const video = document.createElement('video');\r\n        // video.id = userId;\r\n        // video.srcObject = event.stream;\r\n        // video.autoplay = 'autoplay';\r\n        // document.body.append(video);\r\n        // remote.push({\r\n        //     video: video,\r\n        //     stream: event.stream\r\n        // });\r\n    }\r\n\r\n    function handleRemoteStreamRemoved(event) {\r\n        console.log(event);\r\n    }\r\n\r\n    function checkMemberList() {\r\n        console.log(memberList);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p>{teamId}팀과 함께하는 중</p>\r\n            <Link to=\"/\">첫 페이지로 가기</Link>\r\n            <Button\r\n                onClick={() => {checkMemberList()}}>MemberListCheck</Button>\r\n            <Member\r\n                memberList={memberList}\r\n                offerToMember={offerToMember}\r\n            ></Member>\r\n            <ChatInput\r\n                sendMessage={(user, message) => { sendChatMessage(user, message) }}\r\n            ></ChatInput>\r\n            <Chat\r\n                chatList={chatList}\r\n            ></Chat>\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { Button, Box, makeStyles, TextField } from '@material-ui/core'\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles({\r\n    home: {\r\n        position: 'absolute',\r\n        display: 'flex',\r\n        width: '100%',\r\n        height: '100%',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        flexDirection: 'column',\r\n        color: '#fff',\r\n        background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)'\r\n    },\r\n    title: {\r\n        height: '3rem',\r\n        fontSize: '2rem'\r\n    },\r\n    startButton: {\r\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n        color: '#fff',\r\n        width: '200px',\r\n        height: '50px',\r\n        borderRadius: '30px',\r\n        fontSize: '1.2rem'\r\n    },\r\n    joinButton: {\r\n        fontSize: '1.2rem',\r\n        color: '#fff'\r\n    }\r\n})\r\n\r\nexport default function Home() {\r\n    const styles = useStyles();\r\n    const history = useHistory();\r\n    const [started, setStarted] = useState(false);\r\n    const [teamId, setTeamId] = useState('');\r\n    const [userName, setUserName] = useState('');\r\n\r\n    function handleClick() {\r\n        setStarted(true);\r\n    }\r\n    function handleChange(e) {\r\n        setTeamId(e.target.value);\r\n    }\r\n    function handleChangeMyName(e) {\r\n        setUserName(e.target.value);\r\n    }\r\n    function handleEnterKey(e) {\r\n        if (e.key === 'Enter') {\r\n            started ? joinTheTeam() : setStarted(true);\r\n        }\r\n    }\r\n    function joinTheTeam() {\r\n        history.push(`/team/${teamId}/${userName}`);\r\n    }\r\n\r\n    return (\r\n        <Box className={styles.home}>\r\n            <h2 className={styles.title}>T E L E P A T H Y</h2>\r\n            <h3>\r\n                {!started && \r\n                <>\r\n                    <TextField\r\n                        label=\"MY NAME\"\r\n                        className={styles.joinTextField}\r\n                        onChange={handleChangeMyName}\r\n                        onKeyPress={handleEnterKey}\r\n                        required\r\n                    />\r\n                    <br/><br/>\r\n                    <Button\r\n                        className={styles.startButton}\r\n                        onClick={handleClick}>START\r\n                    </Button>\r\n                </>}\r\n                {started && <div>\r\n                    <Button\r\n                        className={styles.joinButton}\r\n                        onClick={joinTheTeam}>JOIN THE\r\n                    </Button>\r\n                    <TextField\r\n                        label=\"TEAM\"\r\n                        className={styles.joinTextField}\r\n                        onChange={handleChange}\r\n                        onKeyPress={handleEnterKey}\r\n                    />\r\n                </div>}\r\n            </h3>\r\n        </Box >\r\n    )\r\n}","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport Main from './route/Main';\nimport Home from './route/Home';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/team/:teamId/:userName\">\n          <Main />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}